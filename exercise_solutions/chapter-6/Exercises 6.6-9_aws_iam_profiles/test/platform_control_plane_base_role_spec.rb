require 'awspec'

describe iam_role('ControlPlaneBaseRole') do
  it { should exist }
  it { should have_iam_policy('ControlPlaneBaseRolePolicy') }

  it { should be_allowed_action('route53:AssociateVPCWithHostedZone') }
  it { should be_allowed_action('route53:ChangeResourceRecordSets') }
  it { should be_allowed_action('route53:ChangeTagsForResource') }
  it { should be_allowed_action('route53:GetChange') }
  it { should be_allowed_action('route53:CreateHealthCheck') }
  it { should be_allowed_action('route53:CreateHostedZone') }
  it { should be_allowed_action('route53:CreateKeySigningKey') }
  it { should be_allowed_action('route53:CreateVPCAssociationAuthorization') }
  it { should be_allowed_action('route53:DeactivateKeySigningKey') }
  it { should be_allowed_action('route53:DeleteHealthCheck') }
  it { should be_allowed_action('route53:DeleteHostedZone') }
  it { should be_allowed_action('route53:DeleteKeySigningKey') }
  it { should be_allowed_action('route53:DeleteVPCAssociationAuthorization') }
  it { should be_allowed_action('route53:DisassociateVPCFromHostedZone') }
  it { should be_allowed_action('route53:GetHostedZone') }
  it { should be_allowed_action('route53:GetHostedZoneCount') }
  it { should be_allowed_action('route53:GetHostedZoneLimit') }
  it { should be_allowed_action('route53:ListHostedZones') }
  it { should be_allowed_action('route53:ListHostedZonesByName') }
  it { should be_allowed_action('route53:ListHostedZonesByVPC') }
  it { should be_allowed_action('route53:ListResourceRecordSets') }
  it { should be_allowed_action('route53:ListTagsForResource') }
  it { should be_allowed_action('route53:ListTagsForResources') }
  it { should be_allowed_action('route53:ListVPCAssociationAuthorizations') }
  it { should be_allowed_action('route53:UpdateHostedZoneComment') }
  it { should be_allowed_action('autoscaling:AttachInstances') }
  it { should be_allowed_action('autoscaling:CreateAutoScalingGroup') }
  it { should be_allowed_action('autoscaling:CreateLaunchConfiguration') }
  it { should be_allowed_action('autoscaling:CreateOrUpdateTags') }
  it { should be_allowed_action('autoscaling:DeleteAutoScalingGroup') }
  it { should be_allowed_action('autoscaling:DeleteLaunchConfiguration') }
  it { should be_allowed_action('autoscaling:DeleteTags') }
  it { should be_allowed_action('autoscaling:Describe*') }
  it { should be_allowed_action('autoscaling:DetachInstances') }
  it { should be_allowed_action('autoscaling:SetDesiredCapacity') }
  it { should be_allowed_action('autoscaling:UpdateAutoScalingGroup') }
  it { should be_allowed_action('autoscaling:SuspendProcesses') }
  it { should be_allowed_action('ec2:*Console*') }
  it { should be_allowed_action('ec2:Describe*') }
  it { should be_allowed_action('ec2:*NetworkAclEntry') }
  it { should be_allowed_action('ec2:*SecurityGroup*') }
  it { should be_allowed_action('ec2:*KeyPair') }
  it { should be_allowed_action('ec2:*LaunchTemplate*') }
  it { should be_allowed_action('ec2:*NetworkInterface*') }
  it { should be_allowed_action('ec2:*Image*') }
  it { should be_allowed_action('ec2:*Placement*') }
  it { should be_allowed_action('ec2:*Snapshot*') }
  it { should be_allowed_action('ec2:*Tags') }
  it { should be_allowed_action('ec2:*Volume*') }
  it { should be_allowed_action('ec2:*InstanceProfile*') }
  it { should be_allowed_action('ec2:AssignPrivateIpAddresses') }
  it { should be_allowed_action('ec2:AssociateRouteTable') }
  it { should be_allowed_action('ec2:CancelConversionTask') }
  it { should be_allowed_action('ec2:CancelImportTask') }
  it { should be_allowed_action('ec2:ConfirmProductInstance') }
  it { should be_allowed_action('ec2:Import*') }
  it { should be_allowed_action('ec2:ModifyInstance*') }
  it { should be_allowed_action('ec2:MonitorInstances') }
  it { should be_allowed_action('ec2:RebootInstances') }
  it { should be_allowed_action('ec2:ReportInstanceStatus') }
  it { should be_allowed_action('ec2:ResetInstanceAttribute') }
  it { should be_allowed_action('ec2:RunInstances') }
  it { should be_allowed_action('ec2:StartInstances') }
  it { should be_allowed_action('ec2:StopInstances') }
  it { should be_allowed_action('ec2:TerminateInstances') }
  it { should be_allowed_action('ec2:UnassignPrivateIpAddresses') }
  it { should be_allowed_action('ec2:UnmonitorInstances') }
  it { should be_allowed_action('ec2-instance-connect:SendSerial*') }
  it { should be_allowed_action('ec2:ModifyTrafficMirror*') }
  it { should be_allowed_action('ec2:DeleteTrafficMirror*') }
  it { should be_allowed_action('elasticloadbalancing:DescribeLoadBalancers') }
  it { should be_allowed_action('elasticloadbalancing:DescribeTags') }
  it { should be_allowed_action('elasticloadbalancing:DescribeLoadBalancerAttributes') }
  it { should be_allowed_action('elasticfilesystem:*Backup*') }
  it { should be_allowed_action('elasticfilesystem:*FileSystem*') }
  it { should be_allowed_action('elasticfilesystem:*Mount*') }
  it { should be_allowed_action('elasticfilesystem:*Tag*') }
  it { should be_allowed_action('elasticfilesystem:*Untag*') }
  it { should be_allowed_action('elasticfilesystem:Describe*') }
  it { should be_allowed_action('elasticfilesystem:*LifecycleConfiguration') }
  it { should be_allowed_action('ec2:CreateNetworkInterface') }
  it { should be_allowed_action('ec2:DescribeNetworkInterfaces') }
  it { should be_allowed_action('ec2:DescribeSubnets') }
  it { should be_allowed_action('eks:*') }
  it { should be_allowed_action('iam:AddClientIDToOpenIDConnectProvider') }
  it { should be_allowed_action('iam:AddRoleToInstanceProfile') }
  it { should be_allowed_action('iam:AttachRolePolicy') }
  it { should be_allowed_action('iam:CreateInstanceProfile') }
  it { should be_allowed_action('iam:CreateOpenIDConnectProvider') }
  it { should be_allowed_action('iam:CreateServiceLinkedRole') }
  it { should be_allowed_action('iam:CreatePolicy') }
  it { should be_allowed_action('iam:CreatePolicyVersion') }
  it { should be_allowed_action('iam:CreateRole') }
  it { should be_allowed_action('iam:*Addon') }
  it { should be_allowed_action('iam:DeleteInstanceProfile') }
  it { should be_allowed_action('iam:DeleteOpenIDConnectProvider') }
  it { should be_allowed_action('iam:DeletePolicy') }
  it { should be_allowed_action('iam:DeletePolicyVersion') }
  it { should be_allowed_action('iam:DeleteRole') }
  it { should be_allowed_action('iam:DeleteRolePolicy') }
  it { should be_allowed_action('iam:DeleteServiceLinkedRole') }
  it { should be_allowed_action('iam:DetachRolePolicy') }
  it { should be_allowed_action('iam:GetInstanceProfile') }
  it { should be_allowed_action('iam:GetOpenIDConnectProvider') }
  it { should be_allowed_action('iam:GetPolicy') }
  it { should be_allowed_action('iam:GetPolicyVersion') }
  it { should be_allowed_action('iam:GetRole') }
  it { should be_allowed_action('iam:GetRolePolicy') }
  it { should be_allowed_action('iam:List*') }
  it { should be_allowed_action('iam:PassRole') }
  it { should be_allowed_action('iam:PutRolePolicy') }
  it { should be_allowed_action('iam:Remove*') }
  it { should be_allowed_action('iam:Tag*') }
  it { should be_allowed_action('iam:Untag*') }
  it { should be_allowed_action('iam:Update*') }
  it { should be_allowed_action('logs:CreateLogGroup') }
  it { should be_allowed_action('logs:DescribeLogGroups') }
  it { should be_allowed_action('logs:DeleteLogGroup') }
  it { should be_allowed_action('logs:List*') }
  it { should be_allowed_action('logs:PutRetentionPolicy') }
  it { should be_allowed_action('logs:TagLogGroup') }
  it { should be_allowed_action('logs:UntagLogGroup') }
  it { should be_allowed_action('kms:CreateGrant') }
  it { should be_allowed_action('kms:CreateKey') }
  it { should be_allowed_action('kms:DeleteKey') }
  it { should be_allowed_action('kms:DescribeKey') }
  it { should be_allowed_action('kms:GetKeyPolicy') }
  it { should be_allowed_action('kms:GetKeyRotationStatus') }
  it { should be_allowed_action('kms:ListResourceTags') }
  it { should be_allowed_action('kms:ScheduleKeyDeletion') }
  it { should be_allowed_action('kms:EnableKeyRotation') }
  it { should be_allowed_action('kms:TagResource') }
  it { should be_allowed_action('kms:CreateAlias') }
  it { should be_allowed_action('kms:DeleteAlias') }
  it { should be_allowed_action('kms:ListAliases') }
  it { should be_allowed_action('ssm:GetParameter') }
  it { should be_allowed_action('sqs:*') }
  it { should be_allowed_action('events:*') }
end
